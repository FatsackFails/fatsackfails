<!doctype html>
<html lang="en" class="min-h-full antialiased mode-dark">

<head>
	<style>
    /*--------------------------------
     | For presentation only
     |--------------------------------
    */
		* { font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, "Noto Sans", sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji"; }
		.mode-dark { background-color: #2D3748; color: #fff; }
		.mode-dark:not { color: #2D3748; }
		.darkmodebtn { padding: 0.5rem; background-color: transparent; background-image: none; border: 0; }
		.mode-dark .icon-dark, .icon-light { display: none; color: #fff; }
		.mode-dark .icon-light, .icon-dark { display: block; }
    .wrapper { display: flex; flex-direction: row; justify-content: space-between; align-items: center; max-width: 800px; }

    /*--------------------------------
     | Component Styles
     |--------------------------------
    */
    /* Light mode (default; prefers-color-scheme: light) */
		twitch-promo {
			/* Define your colors */
			--color-text: #000;
			--color-text-hover: #fff;
			--color-bg: #fff;
			--color-bg-hover: #8e45f8;
			--color-border: #000;
			--close-icon-size: 20px;
			--font-stack: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, "Noto Sans", sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";
      /* How to use font property: https://developer.mozilla.org/en-US/docs/Web/CSS/font */
      /* font: font-style font-variant font-weight font-size/line-height font-family */
			--font-headline: normal normal 700 0.85rem/1.5 var(--font-stack);
			--font-title: italic normal normal 0.75rem var(--font-stack);
			/* Twitch Branding */
			--twitch-icon-bg: #8e45f8;
			--twitch-icon-color: #fff;
			--twitch-icon-size: 20px;
		}
    /* Dark Mode (prefers-color-scheme: dark) */
		.mode-dark twitch-promo {
			--color-text: #fff;
			--color-text-hover: #fff;
			--color-bg: #000;
			--color-bg-hover: #8e45f8;
			--color-border: #fff;
		}
	</style>
	<script>
		(localStorage.getItem('darkMode') === 'true') && document.documentElement.classList.add('mode-dark');
	</script>
</head>

<body>
	<div class="wrapper">
		<h1>Twitch Live Alert Web Component</h1>
		<button class="darkmodebtn js-darkmode-toggle" title="Toggle Dark Mode" role="switch" aria-checked="false">
      <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="icon-light"><circle cx="12" cy="12" r="5"></circle><line x1="12" y1="1" x2="12" y2="3"></line><line x1="12" y1="21" x2="12" y2="23"></line><line x1="4.22" y1="4.22" x2="5.64" y2="5.64"></line><line x1="18.36" y1="18.36" x2="19.78" y2="19.78"></line><line x1="1" y1="12" x2="3" y2="12"></line><line x1="21" y1="12" x2="23" y2="12"></line><line x1="4.22" y1="19.78" x2="5.64" y2="18.36"></line><line x1="18.36" y1="5.64" x2="19.78" y2="4.22"></line></svg>
      <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="icon-dark"><path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"></path></svg>
    </button>
	</div>
	<twitch-promo username="auslove" clientid="qnr7smyysc5g98yx6y5lgejqknbs9m"></twitch-promo>

	<script>
		class TwitchPromo extends HTMLElement {
  constructor() {
    super();
    this.attachShadow({ mode: "open" });
    this.username = this.getAttribute("username");
    this.clientId = this.getAttribute("clientid");
  }

  async connectedCallback() {
    this.TWITCH_DATA = await this.getTwitchContent();
    console.log("2. Received stream data!", this.TWITCH_DATA);
    this.GAME_DATA = await this.getTwitchGame();
    console.log("4. Got game data!", this.GAME_DATA);
    if (this.TWITCH_DATA) this.render();
  }

  async getTwitchContent() {
    const url = `https://api.twitch.tv/helix/streams?user_login=${this.username}`;
    const request = new Request(url, {
      method: "GET",
      headers: { "Client-ID": this.clientId }
    });
    const response = await fetch(request);
    const json = await response.json();
    console.log("1. Connected to /streams", json.data[0]);
    if (json.data) return json.data[0];
  }

  async getTwitchGame() {
    const streamData = this.TWITCH_DATA;
    const url = `https://api.twitch.tv/helix/games?id=${streamData.game_id}`
    const request = new Request(url, {
      method: "GET",
      headers: { "Client-ID": this.clientId }
    });
    const response = await fetch(request);
    const json = await response.json();
    console.log("3. Connected to /games", json.data[0]);
    if (json.data) return json.data[0];
  }

  styleComponent() {
    let styleString = `
      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
        font-family: var(--font-stack);
      }
      .twitch-alert-container {
        position: fixed;
        bottom: .5rem;
        right: .5rem;
        width: calc(100% - 1rem);
        max-width: 800px;
        left: 50%;
        transform: translateX(-50%);
        border: 3px solid var(--color-border, #000);
        color: var(--color-text, #000);
        background-color: var(--color-bg, #fff);
        transition: all .5s ease-out;
      }
      .twitch-alert-container:hover .twitch-alert-stream {
        color: var(--color-text-hover, #fff);
        transition: all .25s ease;
      }
      .twitch-alert-container:after {
        position: absolute;
        content: "";
        top: 0;
        left: 0;
        width: 0;
        height: 100%;
        background: var(--twitch-icon-bg, #fff);
        transition: all .45s;
      }
      .twitch-alert-container:hover:after {
        width: 100%;
      }
      .twitch-alert-wrapper {
        position: relative;
        z-index: 2;
      }
      .twitch-alert {
        display: flex;
        flex-direction: row;
        align-items: stretch;
        font-size: .85rem;
        line-height: 1.3em;
        color: var(--color-text, #000);
        text-decoration: none;
      }
      .twitch-alert > * + * {
        margin-top: .85rem;
      }
      .twitch-brand-container {
        display: flex;
        justify-content: center;
        align-items: center;
        font-size: 1.25rem;
        font-weight: 700;
        padding: 1.5rem;
        background-color: var(--twitch-icon-bg);
      }
      .twitch-brand-icon {
        color: var(--twitch-brand-icon, #fff);
        width: var(--twitch-icon-size, 24px);
        height: var(--twitch-icon-size, 24px);
      }
      .twitch-alert-stream {
        text-align: left;
        padding: 1rem;
        color: var(--color-text, #000);
      }
      .twitch-alert-stream-headline {
        font: var(--font-headline, 0.75rem);
        line-height: 1.5;
      }
      .twitch-alert-stream-title {
        font: var(--font-title, 0.75rem);
      }
      .twitch-alert-close-button {
        position: absolute;
        top: 0;
        right: 0;
        transform: translate(50%,-50%);
        border: 0;
        border-radius: 100%;
        width: var(--close-icon-size, 24px);
        height: var(--close-icon-size, 24px);
        font-size: 1.1rem;
        background: var(--color-border, #000);
        line-height: 1em;
        font-weight: bold;
        display: flex;
        align-items: center;
        justify-content: center;
        color: var(--color-border, #000);
        cursor: pointer;
      }
      .twitch-alert-close-button-icon {
        width: var(--close-icon-size, 24px);
        height: var(--close-icon-size, 24px);
        fill: var(--color-bg, #fff);
      }
      .twitch-alert > * {
        margin: 0;
      }
    `;
    return styleString;
  }

  async render() {
    const stream = this.TWITCH_DATA;
    console.log("5. Loaded stream data!", stream);

    const game = this.GAME_DATA;
    console.log("6. Loaded game data!", game);

    // Viewer Count
    const viewerLang = (count, noun, suffix = 's') => `${count} ${noun}${count !== 1 ? suffix : ''}`;
    const viewerCount = viewerLang(stream.viewer_count, 'viewer');

    if (stream) {
      this.shadowRoot.innerHTML = `
        <style>
          ${this.styleComponent()}
        </style>
        <div class="twitch-alert-container">
          <div class="twitch-alert-wrapper">
            <a href="https://twitch.tv/${stream.user_name}" class="twitch-alert">
              <div class="twitch-brand-container">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" fill="currentColor"
                class="twitch-brand-icon" aria-labelledby="twitch-icon-name">
                <title id="twitch-icon-name">Twitch</title>
                <path d="M391.17,103.47H352.54v109.7h38.63ZM285,103H246.37V212.75H285ZM120.83,0,24.31,91.42V420.58H140.14V512l96.53-91.42h77.25L487.69,256V0ZM449.07,237.75l-77.22,73.12H294.61l-67.6,64v-64H140.14V36.58H449.07Z"/>
                </svg>
              </div>
              <div class="twitch-alert-stream">
                <p class="twitch-alert-stream-headline">Live now with ${game.name} and ${viewerCount}!</p>
                <p class="twitch-alert-stream-title">${stream.title}</p>
              </div>
            </a>
            <button class="twitch-alert-close-button">
              <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
              class="twitch-alert-close-button-icon" aria-labelledby="twitch-close-title" focusable="false">
              <title id="twitch-close-title">Close</title>
              <circle cx="12" cy="12" r="10"></circle><line x1="15" y1="9" x2="9" y2="15"></line><line x1="9" y1="9" x2="15" y2="15"></line>
              </svg>
            </button>
          </div>
        </div>
      `;
      this.afterRender();
    }
  }
  afterRender() {
    this.closeButton = this.shadowRoot.querySelector(
      ".twitch-alert-close-button"
    );
    let element = this;
    this.closeButton.addEventListener("click", function(evt) {
      evt.preventDefault();
      element.remove();
    });
  }
}

if ("customElements" in window) {
  customElements.define("twitch-promo", TwitchPromo);
}
	</script>

	<script>
		const SELECTORS = {
  toggleBtn: '.js-darkmode-toggle'
}
const CLASSES = {
  darkMode: 'mode-dark'
}

const STORAGE_KEY = 'darkMode'
const COLOR_SCHEME_KEY = '--color-scheme'

class DarkMode {
  constructor() {
    this.toggleBtn = document.querySelector(SELECTORS.toggleBtn)
    this.isActive = false

    if (this.toggleBtn) {
      this.toggleBtn.addEventListener('click', () => this.toggle())
    }

    this.init()
  }

  getSystemPreference() {
    let response = getComputedStyle(
      document.documentElement
    ).getPropertyValue(COLOR_SCHEME_KEY)

    if (response.length) {
      return response.replace(/\"/g, '').trim()
    }

    return null
  }

  init() {
    if (this.hasLocalStorage()) {
      const systemPreference = this.getSystemPreference()
      const storedSetting = localStorage.getItem(STORAGE_KEY)

      let preference
      if (storedSetting) {
        preference = storedSetting === 'true'
      } else if (systemPreference) {
        preference = systemPreference === 'dark'
      }

      this.toggle(preference)
    }
  }

  toggle(force) {
    this.isActive = typeof force === 'boolean' ? force : !this.isActive
    document.documentElement.classList.toggle(
      CLASSES.darkMode,
      this.isActive
    )
    this.toggleBtn.setAttribute('aria-checked', String(this.isActive))

    if (this.hasLocalStorage()) {
      localStorage.setItem(STORAGE_KEY, this.isActive)
    }
  }

  hasLocalStorage() {
    return typeof Storage !== 'undefined'
  }
}

if (window.CSS && CSS.supports('color', 'var(--fake-var)')) {
  new DarkMode()
}
	</script>

</body>

</html>
